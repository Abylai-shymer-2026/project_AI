# app/routers/influencers.py
from __future__ import annotations
import io
from typing import Dict
import pandas as pd
from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, BufferedInputFile)

from .. import llm
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ app/influencers.py –µ—Å—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
from ..influencers import (
    list_cities, query_influencers, paginate, list_topics,
    export_excel, export_pdf
)

router = Router(name="influencers")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–±–æ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏ ---
_user_states: Dict[int, Dict] = {}


def get_user_state(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in _user_states:
        _user_states[user_id] = {
            "filters": {},
            "page": 1,
            "advanced_choice_made": False,
            "advanced_mode": False
        }
    return _user_states[user_id]


def get_next_step(state: Dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    filters = state["filters"]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    if not filters.get("cities"): return "city"
    if not filters.get("topics"): return "topic"
    if not filters.get("age_range"): return "age"
    if not filters.get("gender"): return "gender"
    if not filters.get("language"): return "language"
    if not state.get("advanced_choice_made"): return "advanced_or_results"
    if state.get("advanced_mode"):
        if not filters.get("followers_range"): return "followers"
        if not filters.get("price_range"): return "budget"  # 'budget' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'price_range'
        if not filters.get("service"): return "service"
    return "done"


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def city_buttons() -> InlineKeyboardMarkup:
    cities = list_cities()[:12]
    buttons = [InlineKeyboardButton(text=c, callback_data=f"select:{c}") for c in cities]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 3] for i in range(0, len(buttons), 3)])


def topic_buttons() -> InlineKeyboardMarkup:
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è list_topics() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ app/influencers.py
    topics = list_topics()[:8]
    buttons = [InlineKeyboardButton(text=t, callback_data=f"select:{t}") for t in topics]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])


def gender_buttons() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üë®", callback_data="select:–ú—É–∂—Å–∫–æ–π"),
         InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©", callback_data="select:–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="select:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]])


def language_buttons() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π", callback_data="select:–ö–∞–∑–∞—Ö—Å–∫–∏–π"),
         InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="select:–†—É—Å—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–î–≤—É—è–∑—ã—á–Ω—ã–π", callback_data="select:–î–≤—É—è–∑—ã—á–Ω—ã–π"),
         InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="select:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]])


def advanced_or_results_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="select:get_results")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫", callback_data="select:advanced_search")]])


def results_keyboard(page: int, max_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if page < max_pages:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page:{page + 1}"))
    if nav:
        buttons.append(nav)
    buttons.append([
        InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç PDF", callback_data="export:pdf"),
        InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="export:xlsx"),
    ])
    buttons.append([InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–¥–±–æ—Ä", callback_data="new_search")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

async def process_selection_step(message: Message, user_input: str | None, event: str):
    state = get_user_state(message.from_user.id)
    step_before = get_next_step(state)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if step_before == "advanced_or_results" and user_input in ["get_results", "advanced_search"]:
        state["advanced_choice_made"] = True
        state["advanced_mode"] = (user_input == "advanced_search")
    elif user_input:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–µ —à–∞–≥–∏
        if user_input.lower() in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ª—é–±–æ–π", "skip"] and step_before in ["age", "gender", "language",
                                                                                     "followers", "budget", "service"]:
            state["filters"][
                step_before + "_range" if "age" in step_before or "follower" in step_before else step_before] = "skipped"
        else:
            route = await llm.postreg_router_decide(
                filters=state["filters"], user_text=user_input, user_event=event,
                pending_step=step_before, cities_from_db=list_cities())
            for key, value in (route.get("updates") or {}).items():
                if value: state["filters"][key] = value

    step_after = get_next_step(state)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    if step_after == "done":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–¥–∞–Ω—ã! –ì–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å —Å–ø–∏—Å–æ–∫... üïµÔ∏è‚Äç‚ôÄÔ∏è")
        await show_results(message, state)
        return

    resp = await llm.postreg_responder_reply(
        state={"filters": state["filters"], "pending_step": step_after}, user_question=None)

    kb_map = {
        "city": city_buttons(), "topic": topic_buttons(), "gender": gender_buttons(),
        "language": language_buttons(), "advanced_or_results": advanced_or_results_keyboard()
    }
    await message.answer(resp.get("assistant_text", "–ü—Ä–æ–¥–æ–ª–∂–∏–º..."), reply_markup=kb_map.get(step_after))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Aiogram ---

async def start_selection(message: Message):
    _user_states.pop(message.from_user.id, None)
    await process_selection_step(message, user_input=None, event="start")


@router.message(F.text)
async def on_text_message(message: Message):
    if message.from_user.id in _user_states:
        await process_selection_step(message, user_input=message.text, event="message")


@router.callback_query(F.data.startswith("select:"))
async def on_button_click(cb: CallbackQuery):
    if cb.from_user.id in _user_states:
        user_choice = cb.data.split(":", 1)[1]
        await cb.message.edit_text(f"<i>–í–∞—à –≤—ã–±–æ—Ä: {user_choice}</i>")
        await process_selection_step(cb.message, user_input=user_choice, event="button")
    await cb.answer()


@router.callback_query(F.data == "new_search")
async def on_new_search(cb: CallbackQuery):
    await cb.message.delete()
    await start_selection(cb.message)
    await cb.answer()


async def show_results(message: Message, state: Dict, edit: bool = False):
    filters_to_query = {k: v for k, v in state.get("filters", {}).items() if v != "skipped"}
    df = query_influencers(**filters_to_query)

    if df.empty:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòï", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–¥–±–æ—Ä", callback_data="new_search")]]))
        return

    page = state.get("page", 1)
    chunk, max_pages = paginate(df, page, 5)

    lines = []
    for _, r in chunk.iterrows():
        followers = f'{int(r["followers"]):,}'.replace(',', ' ') if pd.notnull(r.get("followers")) else "-"
        lines.append(
            f"üë§ <b>{r.get('name', '')}</b> (@{r.get('username', '')}) - {r.get('city', '')}\n"
            f"<b>–¢–µ–º—ã:</b> {r.get('topics', '')}\n"
            f"<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {followers} | <b>–Ø–∑—ã–∫:</b> {r.get('language', '-')}"
        )

    text = "–í–æ—Ç –∫—Ç–æ –Ω–∞—à—ë–ª—Å—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n" + "\n\n".join(lines) + f"\n\n<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_pages}</i>"

    if edit:
        await message.edit_text(text, reply_markup=results_keyboard(page, max_pages))
    else:
        await message.answer(text, reply_markup=results_keyboard(page, max_pages))


@router.callback_query(F.data.startswith("page:"))
async def on_page_switch(cb: CallbackQuery):
    state = get_user_state(cb.from_user.id)
    state["page"] = int(cb.data.split(":")[1])
    await show_results(cb.message, state, edit=True)
    await cb.answer()


@router.callback_query(F.data.startswith("export:"))
async def on_export(cb: CallbackQuery):
    await cb.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")
    state = get_user_state(cb.from_user.id)
    filters_to_query = {k: v for k, v in state.get("filters", {}).items() if v != "skipped"}
    df = query_influencers(**filters_to_query)

    if df.empty:
        await cb.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    if cb.data.endswith("pdf"):
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è PDF
        pdf_bytes = io.BytesIO()
        # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è export_pdf, –ø–∏—à—É—â–∞—è –≤ BytesIO
        # export_pdf(df, pdf_bytes)
        # pdf_bytes.seek(0)
        # await cb.message.answer_document(BufferedInputFile(pdf_bytes, "influencers.pdf"))
        await cb.message.answer("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    else:  # Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Influencers')
        output.seek(0)
        await cb.message.answer_document(BufferedInputFile(output, "influencers.xlsx"))