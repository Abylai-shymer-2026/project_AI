# app/routers/influencers.py
from __future__ import annotations
import io
from typing import Dict, Optional, List
import pandas as pd  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç pandas
from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile

from .. import llm
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏
# –ù–∞–ø—Ä–∏–º–µ—Ä, export_excel_to_bytes(df) -> bytes
from ..influencers import (
    list_cities, query_influencers, paginate, export_excel, export_pdf
)

router = Router(name="influencers")

# –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ _state - —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ.
# –ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ç–µ—Ä—è—é—Ç —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞.
# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –Ω–∞ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –∏–∑ aiogram.
# –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º.
_state: Dict[int, Dict] = {}


def _get_state(uid: int) -> Dict:
    return _state.setdefault(uid, {
        "filters": {
            "cities": None, "topics": None, "age_range": None,
            "followers_range": None, "language": None,
        },
        "pending_step": "cities", "page": 1,
        "last_list_len": 0, "selection_started": False,
    })


# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: city_buttons, language_buttons, etc.) ...
def city_buttons() -> InlineKeyboardMarkup:
    cities = list_cities()[:48]
    rows = [];
    row = []
    for i, c in enumerate(cities, 1):
        row.append(InlineKeyboardButton(text=c, callback_data=f"city:{c}"))
        if i % 3 == 0: rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="city:done")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def language_buttons() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π", callback_data="lang:–ö–∞–∑–∞—Ö—Å–∫–∏–π"),
         InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang:–†—É—Å—Å–∫–∏–π"),
         InlineKeyboardButton(text="–î–≤—É—è–∑—ã—á–Ω—ã–π", callback_data="lang:–î–≤—É—è–∑—ã—á–Ω—ã–π")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="lang:skip")]
    ])


def paging_keyboard(page: int, pages: int) -> InlineKeyboardMarkup:
    rows = [[]]
    if page > 1:
        rows[0].append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if page < pages:
        rows[0].append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page:{page + 1}"))
    rows.append([
        InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç PDF", callback_data="export:pdf"),
        InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="export:xlsx"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _buttons_for(step: str) -> InlineKeyboardMarkup | None:
    if step == "cities": return city_buttons()
    if step == "language": return language_buttons()
    return None


async def start_selection(message: Message):
    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)

    st = _get_state(message.from_user.id)
    st["pending_step"] = "cities"
    st["selection_started"] = True

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM –¥–ª—è –±–æ–ª—å—à–µ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    resp = await llm.postreg_responder_reply(state=st, user_question=None)
    kb = _buttons_for(st["pending_step"]) if resp.get("ask_buttons") != "none" else None

    await message.answer(resp["assistant_text"], reply_markup=kb)


@router.callback_query(F.data.startswith("city:"))
async def on_city(cb: CallbackQuery):
    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await cb.message.bot.send_chat_action(cb.from_user.id, action=ChatAction.TYPING)

    st = _get_state(cb.from_user.id)
    val = cb.data.split(":", 1)[1]
    if val != "done":
        route = await llm.postreg_router_decide(
            filters=st["filters"], user_text=val, user_event="button",
            pending_step=st["pending_step"], cities_from_db=list_cities(),
        )
        updates = route.get("updates") or {}
        for k, v in updates.items(): st["filters"][k] = v
        st["pending_step"] = route.get("next_step") or st["pending_step"]
        await cb.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {val}")
        return

    if not st["filters"]["cities"]:
        await cb.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥", show_alert=True)
        return

    st["pending_step"] = "topics"
    resp = await llm.postreg_responder_reply(state=st, user_question=None)
    kb = _buttons_for(st["pending_step"]) if resp.get("ask_buttons") != "none" else None
    await cb.message.edit_text(resp["assistant_text"], reply_markup=kb)


@router.callback_query(F.data.startswith("lang:"))
async def on_lang(cb: CallbackQuery):
    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await cb.message.bot.send_chat_action(cb.from_user.id, action=ChatAction.TYPING)

    st = _get_state(cb.from_user.id)
    code = cb.data.split(":", 1)[1]
    val = None if code == "skip" else code

    route = await llm.postreg_router_decide(
        filters=st["filters"], user_text=(val or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), user_event="button",
        pending_step=st["pending_step"], cities_from_db=list_cities(),
    )
    for k, v in (route.get("updates") or {}).items(): st["filters"][k] = v
    st["pending_step"] = route.get("next_step") or st["pending_step"]

    if st["pending_step"] == "done":
        await cb.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å —Å–ø–∏—Å–æ–∫.")
        await show_results(cb.message, st)
        await cb.answer()
        return

    resp = await llm.postreg_responder_reply(state=st, user_question=None)
    kb = _buttons_for(st["pending_step"]) if resp.get("ask_buttons") != "none" else None
    await cb.message.edit_text(resp["assistant_text"], reply_markup=kb)
    await cb.answer()


@router.callback_query(F.data.startswith("page:"))
async def on_page(cb: CallbackQuery):
    await cb.message.bot.send_chat_action(cb.from_user.id, action=ChatAction.TYPING)
    st = _get_state(cb.from_user.id)
    try:
        st["page"] = int(cb.data.split(":", 1)[1])
    except:
        pass
    await show_results(cb.message, st, edit=True)
    await cb.answer()


@router.callback_query(F.data.startswith("export:"))
async def on_export(cb: CallbackQuery):
    await cb.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    await cb.message.bot.send_chat_action(cb.from_user.id, action=ChatAction.UPLOAD_DOCUMENT)

    st = _get_state(cb.from_user.id)
    df = query_influencers(**st["filters"])
    if df.empty:
        await cb.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    # –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏, –∞ –Ω–µ —Å –¥–∏—Å–∫–∞
    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ `export_pdf` –∏ `export_excel` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    # –∏–∑–º–µ–Ω–µ–Ω—ã, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–∞–π—Ç—ã (bytes) –≤–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫.
    # –ù–∞–ø—Ä–∏–º–µ—Ä: `def export_pdf_to_bytes(df) -> bytes:`
    if cb.data.endswith("pdf"):
        # file_bytes = export_pdf_to_bytes(df) # <-- –í–∞—à–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        # document = BufferedInputFile(file_bytes, filename="influencers.pdf")
        # await cb.message.answer_document(document=document)
        await cb.message.answer("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    else:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Influencers')
        output.seek(0)
        document = BufferedInputFile(output.read(), filename="influencers.xlsx")
        await cb.message.answer_document(document=document)


async def show_results(message: Message, st: Dict, edit: bool = False):
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)

    df = query_influencers(**st["filters"])
    page = st.get("page", 1)
    chunk, pages = paginate(df, page, 5)
    st["last_list_len"] = len(df)

    if chunk.empty:
        text = "–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏. üòï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ç–µ–º—ã."
        if edit:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    lines = []
    for _, r in chunk.iterrows():
        followers = f'{int(r["followers"]):,}'.replace(',', ' ') if pd.notnull(r["followers"]) else "-"
        lines.append(
            f"üë§ <b>{r.get('name', '')}</b> (@{r.get('username', '')}) - {r.get('city', '')}\n"
            f"<b>–¢–µ–º—ã:</b> {r.get('topics', '')}\n"
            f"<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {followers} | <b>ER:</b> {r.get('er', '-')}\n"
            f"<a href='{r.get('profile_url', '')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>"
        )
    text = "–í–æ—Ç –∫—Ç–æ –Ω–∞—à—ë–ª—Å—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n" + "\n\n".join(lines) + f"\n\n<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {pages}</i>"
    kb = paging_keyboard(page, pages)
    if edit:
        await message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
    else:
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)


@router.message()
async def on_message(message: Message):
    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)

    st = _get_state(message.from_user.id)
    if not st.get("selection_started"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    txt = (message.text or "").strip()
    route = await llm.postreg_router_decide(
        filters=st["filters"], user_text=txt, user_event="message",
        pending_step=st["pending_step"], cities_from_db=list_cities(),
    )
    for k, v in (route.get("updates") or {}).items(): st["filters"][k] = v
    st["pending_step"] = route.get("next_step") or st["pending_step"]

    user_q = txt if route.get("intent") in {"question", "both"} else None
    resp = await llm.postreg_responder_reply(state=st, user_question=user_q)

    if st["pending_step"] == "done":
        await message.answer(resp["assistant_text"])
        await show_results(message, st)
        return

    kb = _buttons_for(st["pending_step"]) if resp.get("ask_buttons") != "none" else None
    await message.answer(resp["assistant_text"], reply_markup=kb)