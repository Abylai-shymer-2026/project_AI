# app/routers/common.py
from __future__ import annotations

import random
from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery

from ..config import settings
from ..token_store import tokens
from ..keyboards import join_kb, phone_request_kb, remove_kb
from ..formatting import sanitize_html
from ..manager import handle_event
from ..routers.influencers import start_selection  # –∑–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ –ø–æ–¥–±–æ—Ä–∞ –±–ª–æ–≥–µ—Ä–æ–≤

router = Router(name="common")

GREETING = (
    "üëãüèª–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–¥–∏–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ Nonna Marketing!\n\n"
    "–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.\n\n"
    "üìã–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
)


async def _strict_mode_guard(message: Message) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –≤ STRICT —Ä–µ–∂–∏–º–µ (–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)."""
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(message.from_user.id):
        text = (
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        await message.answer(text)
        return True
    return False


@router.message(CommandStart(deep_link=True))
async def start_with_payload(message: Message, command: CommandObject) -> None:
    user_id = message.from_user.id
    payload = (command.args or "").strip()
    token = payload.replace("invite_", "").strip()

    if settings.START_MODE.lower() == "strict":
        if tokens.consume(token, user_id):
            await message.answer(GREETING, reply_markup=join_kb())
            return
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # dev —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–∞—ë–º –¥–æ—Å—Ç—É–ø
    tokens.grant_for_dev(user_id)
    await message.answer(GREETING, reply_markup=join_kb())


@router.message(CommandStart())
async def start_plain(message: Message) -> None:
    user_id = message.from_user.id
    if settings.START_MODE.lower() == "strict":
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return
    tokens.grant_for_dev(user_id)
    await message.answer(GREETING, reply_markup=join_kb())


@router.callback_query(F.data == "join")
async def on_join(cb: CallbackQuery) -> None:
    user_id = cb.from_user.id
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(user_id):
        await cb.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", show_alert=True)
        return

    # llm-–º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è
    text, ask_phone, next_action = await handle_event(user_id=user_id, system_event="joined")
    text = sanitize_html(text or "").strip()
    if not text:
        text = random.choice([
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.",
            "–ü—Ä–∏–≤–µ—Ç! –û—á–µ–Ω—å —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å.",
            "–†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!",
        ])

    # –í–ê–ñ–ù–û: edit_text –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ InlineKeyboardMarkup/None.
    await cb.message.edit_text(text)

    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å ReplyKeyboardMarkup.
    if ask_phone:
        await cb.message.answer(
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=phone_request_kb()
        )

    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º.
    if next_action == "start_selection":
        await start_selection(cb.message)

    await cb.answer()


@router.message(F.contact)
async def on_contact(message: Message) -> None:
    # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(message.from_user.id):
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    phone = message.contact.phone_number
    text, ask_phone, next_action = await handle_event(
        user_id=message.from_user.id,
        phone=phone,
        system_event="contact",
    )
    text = sanitize_html(text or "").strip()
    if not text:
        text = random.choice([
            "–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º.",
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.",
            "–û—Ç–ª–∏—á–Ω–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ.",
        ])

    # –ü–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚Äî —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(text, reply_markup=remove_kb())

    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Å—Ç–∞—Ä—Ç –ø–æ–¥–±–æ—Ä–∞
    if next_action == "start_selection":
        await start_selection(message)


@router.message(F.text)
async def any_text(message: Message) -> None:
    # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(message.from_user.id):
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    text, ask_phone, next_action = await handle_event(
        user_id=message.from_user.id,
        user_text=message.text,
        system_event="message",
    )
    text = sanitize_html(text or "").strip()
    if not text:
        text = random.choice([
            "–ü—Ä–æ–¥–æ–ª–∂–∏–º.",
            "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º.",
            "–•–æ—Ä–æ—à–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ.",
        ])

    if ask_phone:
        # –¢–æ–ª—å–∫–æ ReplyKeyboard –∑–¥–µ—Å—å
        await message.answer(text, reply_markup=phone_request_kb())
    else:
        await message.answer(text)

    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Å—Ç–∞—Ä—Ç –ø–æ–¥–±–æ—Ä–∞
    if next_action == "start_selection":
        await start_selection(message)
