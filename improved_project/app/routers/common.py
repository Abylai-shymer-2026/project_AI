# app/routers/common.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery

from ..config import settings
from ..token_store import tokens
from ..keyboards import join_kb, phone_request_kb, remove_kb
from ..formatting import sanitize_html
from ..manager import handle_event
from ..routers.influencers import start_selection  # –∑–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ –ø–æ–¥–±–æ—Ä–∞ –±–ª–æ–≥–µ—Ä–æ–≤

router = Router(name="common")

# –£–ë–†–ê–õ–ò –ö–û–ù–°–¢–ê–ù–¢–£ GREETING

@router.message(CommandStart(deep_link=True))
async def start_with_payload(message: Message, command: CommandObject) -> None:
    user_id = message.from_user.id
    payload = (command.args or "").strip()
    token = payload.replace("invite_", "").strip()

    if settings.START_MODE.lower() == "strict":
        if tokens.consume(token, user_id):
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=join_kb())
            return
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # dev —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–∞—ë–º –¥–æ—Å—Ç—É–ø
    tokens.grant_for_dev(user_id)
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=join_kb())


@router.message(CommandStart())
async def start_plain(message: Message) -> None:
    user_id = message.from_user.id
    if settings.START_MODE.lower() == "strict":
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return
    tokens.grant_for_dev(user_id)
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=join_kb())


@router.callback_query(F.data == "join")
async def on_join(cb: CallbackQuery) -> None:
    user_id = cb.from_user.id
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(user_id):
        await cb.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", show_alert=True)
        return

    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await cb.message.bot.send_chat_action(cb.from_user.id, action=ChatAction.TYPING)

    # llm-–º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–ø–µ—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    text, ask_phone, next_action = await handle_event(user_id=user_id, system_event="joined")
    text = sanitize_html(text or "").strip() or "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É "Join" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    await cb.message.edit_text(text)

    if ask_phone:
        await cb.message.answer(
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.",
            reply_markup=phone_request_kb()
        )

    if next_action == "start_selection":
        await start_selection(cb.message)

    await cb.answer()


@router.message(F.contact)
async def on_contact(message: Message) -> None:
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(message.from_user.id):
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)

    phone = message.contact.phone_number
    text, ask_phone, next_action = await handle_event(
        user_id=message.from_user.id,
        phone=phone,
        system_event="contact",
    )
    text = sanitize_html(text or "").strip() or "–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º."

    await message.answer(text, reply_markup=remove_kb())

    if next_action == "start_selection":
        await start_selection(message)


@router.message(F.text)
async def any_text(message: Message) -> None:
    if settings.START_MODE.lower() == "strict" and not tokens.is_authorized(message.from_user.id):
        await message.answer(
            "üîí –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä (@A_bylaikhan)."
        )
        return

    # –î–û–ë–ê–í–õ–Ø–ï–ú "TYPING..."
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)

    text, ask_phone, next_action = await handle_event(
        user_id=message.from_user.id,
        user_text=message.text,
        system_event="message",
    )
    text = sanitize_html(text or "").strip() or "–ü—Ä–æ–¥–æ–ª–∂–∏–º."

    reply_markup = phone_request_kb() if ask_phone else None
    await message.answer(text, reply_markup=reply_markup)

    if next_action == "start_selection":
        await start_selection(message)