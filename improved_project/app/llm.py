# app/routers/influencers.py
from __future__ import annotations
import io
import pandas as pd
from typing import Dict
from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, BufferedInputFile)

from ..influencers import (
    list_cities, query_influencers, paginate, list_topics
)

router = Router(name="influencers")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–±–æ—Ä–∞ ---
# –•—Ä–∞–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
# –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Redis).
_user_states: Dict[int, Dict] = {}


def get_user_state(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    default_state = {
        "filters": {
            "cities": None, "topics": None, "age_range": None,
            "gender": None, "language": None, "followers_range": None,
            "price_range": None, "service": None,
        },
        "current_step": "city",  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≥–æ—Ä–æ–¥–∞
        "page": 1
    }
    return _user_states.setdefault(user_id, default_state)


def get_next_step(state: Dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    filters = state["filters"]
    if filters["cities"] is None: return "city"
    if filters["topics"] is None: return "topic"
    if filters["age_range"] is None: return "age"
    if filters["gender"] is None: return "gender"
    if filters["language"] is None: return "language"

    # –ü–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    if state.get("advanced_choice_made") is None:
        return "advanced_or_results"

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫
    if state.get("advanced_mode") is True:
        if filters["followers_range"] is None: return "followers"
        if filters["price_range"] is None: return "budget"
        if filters["service"] is None: return "service"

    return "done"  # –í—Å–µ —à–∞–≥–∏ –ø—Ä–æ–π–¥–µ–Ω—ã


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def city_buttons() -> InlineKeyboardMarkup:
    cities = list_cities()[:12]
    buttons = [InlineKeyboardButton(text=c, callback_data=f"select:{c}") for c in cities]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 3] for i in range(0, len(buttons), 3)])


def topic_buttons() -> InlineKeyboardMarkup:
    topics = list_topics()[:8]
    buttons = [InlineKeyboardButton(text=t, callback_data=f"select:{t}") for t in topics]
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])


def gender_buttons() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üë®", callback_data="select:–ú—É–∂—Å–∫–æ–π"),
         InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©", callback_data="select:–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="select:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ])


def language_buttons() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π", callback_data="select:–ö–∞–∑–∞—Ö—Å–∫–∏–π"),
         InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="select:–†—É—Å—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–î–≤—É—è–∑—ã—á–Ω—ã–π", callback_data="select:–î–≤—É—è–∑—ã—á–Ω—ã–π"),
         InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="select:–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
    ])


def advanced_or_results_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="select:get_results")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫", callback_data="select:advanced_search")]
    ])


def get_keyboard_for_step(step: str) -> InlineKeyboardMarkup | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞."""
    if step == "city": return city_buttons()
    if step == "topic": return topic_buttons()
    if step == "gender": return gender_buttons()
    if step == "language": return language_buttons()
    if step == "advanced_or_results": return advanced_or_results_keyboard()
    return None


def results_keyboard(page: int, max_pages: int) -> InlineKeyboardMarkup:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑) ...
    pass


# --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
async def process_selection_step(message: Message, user_input: str | None = None, event: str = "message"):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–æ–º –ø–æ–¥–±–æ—Ä–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    user_id = message.from_user.id
    state = get_user_state(user_id)

    # 1. –†–æ—É—Ç–µ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    current_step_before = get_next_step(state)

    # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ "—Ä–µ–∑—É–ª—å—Ç–∞—Ç/–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    if current_step_before == "advanced_or_results" and user_input in ["get_results", "advanced_search"]:
        state["advanced_choice_made"] = True
        if user_input == "advanced_search":
            state["advanced_mode"] = True
        else:
            state["advanced_mode"] = False
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        route = await llm.postreg_router_decide(
            filters=state["filters"],
            user_text=user_input or "",
            user_event=event,
            pending_step=current_step_before,
            cities_from_db=list_cities(),
        )
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for key, value in (route.get("updates") or {}).items():
            if value:
                state["filters"][key] = value

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    current_step_after = get_next_step(state)
    state["current_step"] = current_step_after

    # 3. –†–µ—Å–ø–æ–Ω–¥–µ—Ä: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    if current_step_after == "done":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–¥–∞–Ω—ã! –ì–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å —Å–ø–∏—Å–æ–∫... üïµÔ∏è‚Äç‚ôÄÔ∏è")
        await show_results(message, state)
        return

    # –ü—Ä–æ—Å–∏–º LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    response_data = await llm.postreg_responder_reply(
        state={"filters": state["filters"], "pending_step": current_step_after},
        user_question=None  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ –Ω–µ –∑–∞–¥–∞–µ—Ç —Å–≤–æ–∏
    )

    text_to_send = response_data.get("assistant_text") or "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞."
    keyboard = get_keyboard_for_step(current_step_after)

    await message.answer(text_to_send, reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Aiogram ---

async def start_selection(message: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å –ø–æ–¥–±–æ—Ä–∞."""
    _user_states.pop(message.from_user.id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await process_selection_step(message, user_input=None, event="start")


@router.message(F.text)
async def on_text_message(message: Message):
    """–õ–æ–≤–∏—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–±–æ—Ä–∞."""
    if not _user_states.get(message.from_user.id):  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return
    await process_selection_step(message, user_input=message.text)


@router.callback_query(F.data.startswith("select:"))
async def on_button_click(cb: CallbackQuery):
    """–õ–æ–≤–∏—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    if not _user_states.get(cb.from_user.id):
        return

    user_choice = cb.data.split(":", 1)[1]
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
    await cb.message.edit_text(f"–í–∞—à –≤—ã–±–æ—Ä: {user_choice}")
    await process_selection_step(cb.message, user_input=user_choice, event="button")
    await cb.answer()


async def show_results(message: Message, state: FSMContext, edit: bool = False):
    await message.bot.send_chat_action(message.from_user.id, action=ChatAction.TYPING)
    data = await state.get_data()
    filters = data.get("filters", {})
    page = data.get("page", 1)

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Sheets
    df = query_influencers(**filters)
    if df.empty:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòï\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–±–æ—Ä —Å –¥—Ä—É–≥–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–¥–±–æ—Ä", callback_data="new_search")]]))
        return

    chunk, max_pages = paginate(df, page, 5)

    text_lines = []
    for _, r in chunk.iterrows():
        followers = f'{int(r["followers"]):,}'.replace(',', ' ') if pd.notnull(r["followers"]) else "-"
        text_lines.append(
            f"üë§ <b>{r.get('name', '')}</b> (@{r.get('username', '')}) - {r.get('city', '')}\n"
            f"<b>–¢–µ–º—ã:</b> {r.get('topics', '')}\n"
            f"<b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {followers} | <b>–Ø–∑—ã–∫:</b> {r.get('language', '-')}"
        )

    text = "–í–æ—Ç –∫—Ç–æ –Ω–∞—à—ë–ª—Å—è –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n\n" + "\n\n".join(
        text_lines) + f"\n\n<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {max_pages}</i>"

    if edit:
        await message.edit_text(text, reply_markup=results_keyboard(page, max_pages))
    else:
        await message.answer(text, reply_markup=results_keyboard(page, max_pages))

    await state.set_state(InfluencerSearch.showing_results)


@router.callback_query(InfluencerSearch.showing_results, F.data.startswith("page:"))
async def on_page_switch(cb: CallbackQuery, state: FSMContext):
    page = int(cb.data.split(":")[1])
    await state.update_data(page=page)
    await show_results(cb.message, state, edit=True)


@router.callback_query(F.data == "new_search")
async def on_new_search(cb: CallbackQuery, state: FSMContext):
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ, –ø–µ—Ä–µ–¥–∞–≤–∞—è message –∏–∑ callback'–∞
    await start_selection(cb.message, state)


# --- –≠–∫—Å–ø–æ—Ä—Ç (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª) ---
@router.callback_query(InfluencerSearch.showing_results, F.data.startswith("export:"))
async def on_export(cb: CallbackQuery, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ...
    await cb.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")

# --- –í–∞–∂–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ dp ---
# –í –≤–∞—à–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ bot.py —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ state_storage –≤ Dispatcher
# dp = Dispatcher(storage=MemoryStorage()) # –∏–ª–∏ RedisStorage
# dp.include_router(influencers.router)